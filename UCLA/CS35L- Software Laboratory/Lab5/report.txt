I wrote both tr2b.c and tr2u.c similarly for the most part. For both, in the main() function, accept two arguments, number of arguments and array of arguments.

Then in an "if statement" check if the number of arguments are three or not.

In another "if statement", I checked if the length of the two string "to" and "from" are different.

The last "if statement" was to check if "from" has duplicates or not. 

If for each "if statement", the requirement was not met, then print an error message in stderr.

The only difference between tr2u.c and tr2b.c is the their last part which is described below.

----------- tr2b.c --------------

1. In this code, I had to implement getchar and putchar system call.
Therefore, I created a integer cur to store getchar() from the file and do while loop as long as it is not end of the file. 

Then if the cur is the same is the current "from" in the list, then copy the current "to" to cur. 

After the loop, use putchar system call to putchar(cur); then get a new one and store in cur for the next round.

------------- tr2u.c --------------
 2. For tr2u.c I had to implement write and read functionality of system call. Therefore, as instruction wanted I created char array with one element, The nbyte arguments to read and write should be 1, so that the program reads and writes single bytes at a time. 

Then I read the documentation both for read and write and I wrote the following to read.

	//0 refers to standard input                                                                                                                                                           
	//1 refers to the number of bytes to read before truncating the data. If the data to be read is smaller than nbytes, all data is saved in the buffer                                   
  	ssize_t readStatus=  read(0, content, 1);

Then in a while as long as there is content to read, and the content is the same as "from" string, then copy that to "to".

Then wrote the following for the write.

      //use 1 for standard output                                                                                                                                                   
      //The second parameter: A pointer to a buffer of at least nbytes bytes, which will be written to the file.                                                                    
      //The third: The number of bytes to write. If smaller than the provided buffer, the output is truncated.                                                                      
      write( 1, content , 1);
      content= read(0, content, 1);

Then read again for the next round with the following. 

	content= read(0, content, 1);

-------------------------------------------------------------
3. Read the manual for strace to be able to do problem #3 of the lab. In the manual I found this description useful:

"Each line in the trace contains the system call name, followed by its arguments in parentheses and its return value."

Since it is asked to create 5MB file, I created a one by the following command
	head --bytes=5000000 /dev/urandom > largefile.txt
Then compile the two .c files
	gcc -o tr2u tr2u.c
	gcc -o tr2b tr2b.c

Then I ran strace on the both .c files with the -c option
strace -c ./tr2b 'AB' 'XY' < largefile.txt > tr2boutput.txt

I got 1250 system calls

then with 
strace -c ./tr2u 'AB' 'XY' < largefile.txt > tr2uoutput.txt

I got  802059 system calls

We see that tr2u has a lot more system
calls than tr2b for large files since there are many read and write calls
Then, ran the strace command  compare the system calls when copying a file into the terminal

strace -c ./tr2b 'AB' 'XY' < largefile.txt

I got 20444 sys calls

 strace -c ./tr2u 'AB' 'XY' < largefile.txt
I got   2020036  sys calls

----------------------------------------------------

4. As the last assignment wants, we ran the time command to compare how long does it take for both to copy files. Based on the result we got from the previous problem, I expect that tr2b.c to be faster.


time ./tr2b 'AB' 'XY' < largefile.txt > tr2boutput.txt

real	0m0.246s
user	0m0.173s
sys	0m0.008s
--------

time ./tr2u 'AB' 'XY' < largefile.txt > tr2uoutput.txt

real	0m11.733s
user	0m1.542s
sys	0m10.119s

--------

time ./tr2b 'AB' 'XY' < largefile.txt

real	0m1.002s
user	0m0.219s
sys	0m0.087s

---------

time ./tr2u 'AB' 'XY' < largefile.txt

real	0m10.165s
user	0m1.393s
sys	0m8.759s

---------

Therefore, the result from the time command proves that  tr2b.c is faster that means buffered I/O is faster than the unbuffered one.




head

---------------------- Homework Report ---------------------------

sfrobu.c is similar to the previous source file except that '-f' option has been implemented, also it uses read and write sys call.

Then we compare the two with 'time' command line.

Before start using the time command, I created a few test files that have different lines with the following commands

yes 'Sample test' | head -n 1000 > testFile1.txt
yes 'Sample test' | head -n 10000 > testFile2.txt
yes 'Sample test' | head -n 100000 > testFile3.txt


Number of lines  |  comparisons
-------------------------------
1000  		 |   19718
10000  		 |   265553
100000 		 |   3325740

Then run the time command for each file

1. For testFile1 with 1000 lines


time ./sfrob < testFile1.txt
real	0m0.009s
user	0m0.007s
sys	0m0.001s

time ./sfrobu < testFile1.txt
real	0m0.072s
user	0m0.003s
sys	0m0.004s

time ./sfrobs < testFile1.txt
real	0m0.002s
user	0m0.001s
sys	0m0.002s

time ./sfrobu -f < testFile1.txt
real	0m0.064s
user	0m0.000s
sys	0m0.001s

time ./sfrobs -f < testFile1.txt
real	0m0.001s
user	0m0.000s
sys	0m0.001s

-------------------------------------
2. For testFile2.txt with 10000 lines
time ./sfrob < testFile2.txt
real	0m0.202s
user	0m0.044s
sys	0m0.023s

time ./sfrobu < testFile2.txt
real	0m0.426s
user	0m0.024s
sys	0m0.091s


time ./sfrobs < testFile2.txt !!!!
real	0m0.002s
user	0m0.001s
sys	0m0.001s

time ./sfrobu -f < testFile2.txt
real	0m0.183s
user	0m0.041s
sys	0m0.026s

time ./sfrobs -f < testFile2.txt
real	0m0.001s
user	0m0.000s
sys	0m0.001s


----------------------------------------
3. For testFile3.txt with 100000 lines
time ./sfrob < testFile3.txt
real	0m2.141s
user	0m0.410s
sys	0m0.366s

time ./sfrobu < testFile3.txt
real	0m2.124s
user	0m0.342s
sys	0m0.310s

time ./sfrobs < testFile3.txt
real	0m0.002s
user	0m0.001s
sys	0m0.001s

time ./sfrobu -f < testFile3.txt
real	0m2.057s
user	0m0.515s
sys	0m0.267s

time ./sfrobs -f < testFile3.txt
real	0m0.002s
user	0m0.001s
sys	0m0.001s


There is something wrong with the script that I couln't figure out and I didn't get the expected result